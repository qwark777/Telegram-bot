import os
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, any_state
from dotenv import load_dotenv, find_dotenv
from aiogram import F, Bot, Dispatcher, types  # –≤–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import asyncio
from aiogram.filters import StateFilter, Command
import mysql.connector
from mysql.connector import pooling, cursor


from databases_functions import not_in_database, insert_full_name, insert_sex, insert_age, insert_age_find  # –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
from reply import start_keyboard, del_keyboard, sex_keyboard

load_dotenv(find_dotenv())
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()


class USER(StatesGroup):
    registration = State()  #–∂–µ–ª–∞–Ω–∏–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    name = State()
    age = State()
    sex = State()
    university = State()
    image = State()
    age_find = State()
    find_sex = State()

@dp.message(StateFilter(None),F.text)
async def start(message: types.Message, state: FSMContext):
    if not_in_database(message.from_user.id):
        await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –≤–∏–∂—É, —á—Ç–æ –º—ã –Ω–µ –∑–Ω–∞–∫–æ–º—ã. –•–æ—á–µ—à—å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?", reply_markup=start_keyboard)
    await state.set_state(USER.registration)


@dp.message(USER.registration, F.text)
async def continue_registration(message: types.Message, state: FSMContext):
    if message.text == "–î–∞ ‚úÖ" or message.text.lower() == "–¥–∞" or message.text == "‚úÖ" or message.text.lower() == "yes":
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=del_keyboard)
        await state.set_state(USER.name)
    elif message.text == "–ù–µ—Ç ‚ùå" or message.text.lower() == "–Ω–µ—Ç" or message.text == "‚ùå" or message.text.lower() == "no":
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–æ–≥–¥–∞, –∫–∞–∫ –∑–∞—Ö–æ—á–µ—à—å)", reply_markup=del_keyboard)
        await state.clear()
    else:
        await message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç' –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=del_keyboard)

@dp.message(USER.name, F.text)
async def get_name(message: types.Message, state: FSMContext):
    if len(message.text.split()) != 2:
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")
    else:
        if insert_full_name(message.from_user.id, message.text.capitalize()):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
            await state.clear()
        else:
            await message.answer("–¢—ã –ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞?", reply_markup=sex_keyboard)
            await state.set_state(USER.sex)


@dp.message(USER.sex, F.text)
async def get_sex(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–µ–≤—É—à–∫–∞" or message.text == "–î–µ–≤—É—à–∫–∞ üë©‚Äçüéì" or message.text.lower() == "girl" or message.text == "üë©‚Äçüéì":
        if insert_sex(message.from_user.id, 0):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=del_keyboard)
            await state.set_state(USER.age)
    elif message.text.lower() == "–ø–∞—Ä–µ–Ω—å" or message.text == "–ü–∞—Ä–µ–Ω—å üë®‚Äçüéì" or message.text.lower() == "boy" or message.text == "üë®‚Äçüéì":
        if insert_sex(message.from_user.id, 1):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=del_keyboard)
            await state.set_state(USER.age)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –º–Ω–µ '–ø–∞—Ä–µ–Ω—å' –∏–ª–∏ '–¥–µ–≤—É—à–∫–∞' –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")


@dp.message(USER.find_sex, F.text)
async def get_find_sex(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–µ–≤—É—à–∫–∞" or message.text == "–î–µ–≤—É—à–∫–∞ üë©‚Äçüéì" or message.text.lower() == "girl" or message.text == "üë©‚Äçüéì":
        if insert_sex(message.from_user.id, 0):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=del_keyboard)
            await state.set_state(USER.age)
    elif message.text.lower() == "–ø–∞—Ä–µ–Ω—å" or message.text == "–ü–∞—Ä–µ–Ω—å üë®‚Äçüéì" or message.text.lower() == "boy" or message.text == "üë®‚Äçüéì":
        if insert_sex(message.from_user.id, 1):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=del_keyboard)
            await state.set_state(USER.age)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –º–Ω–µ '–ø–∞—Ä–µ–Ω—å' –∏–ª–∏ '–¥–µ–≤—É—à–∫–∞' –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")


@dp.message(USER.age, F.text)
async def get_age(message: types.Message, state: FSMContext):
    try:
        if insert_age(message.from_user.id, int(message.text)):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ù–∞–ø–∏—à–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ YY-YY")
            await state.set_state(USER.age_find)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º")


@dp.message(USER.age_find, F.text)
async def get_age_find(message: types.Message, state: FSMContext):
    try:
        if int(message.text.split("-")[0]) > int(message.text.split("-")[1]):
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ")
        elif insert_age_find(message.from_user.id, int(message.text.split("-")[0]), int(message.text.split("-")[1])):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ")
            await state.set_state(USER.image)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º")
    except IndexError:
        await message.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YY-YY")


@dp.message(USER.image, F.photo)
async def get_image(message: types.Message):
    document_id = message.photo[-1].file_id
    file_info = await bot.get_file(document_id)
    string = os.getenv("TRACE")
    tmp = string.format(id=message.from_user.id, number_of_media=file_info.file_id)
    await bot.download_file(file_info.file_path, tmp)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
def get_connector_id():
    return connection_pool
if __name__ == "__main__":
    connection_pool = pooling.MySQLConnectionPool(
        pool_name="dating_bot_pool",
        pool_size=15,
        host='localhost',
        database='msutndr',
        user='root',
        password='12345678'
    )
    asyncio.run(main())
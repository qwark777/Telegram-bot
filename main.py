import os
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, any_state
from dotenv import load_dotenv, find_dotenv
from aiogram import F, Bot, Dispatcher, types  # –≤–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import asyncio
from aiogram.filters import StateFilter, Command
import mysql.connector
from aiogram.types import video_note, InputMediaPhoto, InputMedia, InputMediaVideo
from mysql.connector import pooling, cursor
import time


from databases_functions import not_in_database, insert_full_name, insert_sex, insert_age, insert_age_find, \
    insert_sex_find, select_name, get_count_of_media, print_profile, insert_media, \
    insert_description, insert_type  # –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
from reply import start_keyboard, del_keyboard, sex_keyboard, find_sex_keyboard
from clases import User, AlbumMiddleware, Constants


load_dotenv(find_dotenv())
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()
dp.message.middleware(AlbumMiddleware())


@dp.message(StateFilter(None), F.text)
async def start(message: types.Message, state: FSMContext):
    if await not_in_database(message.from_user.id, connection_pool):
        await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –≤–∏–∂—É, —á—Ç–æ –º—ã –Ω–µ –∑–Ω–∞–∫–æ–º—ã. –•–æ—á–µ—à—å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
                             reply_markup=start_keyboard)
    else:
        string = await select_name(message.from_user.id, connection_pool)
        print(message.chat.id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç, {}! –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ?".format(string))
    await state.set_state(User.registration)


@dp.message(User.registration, F.text)
async def continue_registration(message: types.Message, state: FSMContext):
    if message.text == "–î–∞ ‚úÖ" or message.text.lower() == "–¥–∞" or message.text == "‚úÖ" or message.text.lower() == "yes":
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=del_keyboard)
        await state.set_state(User.name)
    elif message.text == "–ù–µ—Ç ‚ùå" or message.text.lower() == "–Ω–µ—Ç" or message.text == "‚ùå" or message.text.lower() == "no":
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–æ–≥–¥–∞, –∫–∞–∫ –∑–∞—Ö–æ—á–µ—à—å)", reply_markup=del_keyboard)
        await state.clear()
    else:
        await message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç' –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
                             reply_markup=del_keyboard)


@dp.message(User.name, F.text)
async def get_name(message: types.Message, state: FSMContext):
    if len(message.text.split()) != 2:
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")
    else:
        if await insert_full_name(message.from_user.id, message.text.title(), connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
            await state.clear()
        else:
            await message.answer("–¢—ã –ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞?", reply_markup=sex_keyboard)
            await state.set_state(User.sex)


@dp.message(User.sex, F.text)
async def get_sex(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–µ–≤—É—à–∫–∞" or message.text == "–î–µ–≤—É—à–∫–∞ üë©‚Äçüéì" or message.text.lower() == "girl" or message.text == "üë©‚Äçüéì":
        if await insert_sex(message.from_user.id, Constants.girl, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–ö–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?", reply_markup=find_sex_keyboard)
            await state.set_state(User.age)
    elif message.text.lower() == "–ø–∞—Ä–µ–Ω—å" or message.text == "–ü–∞—Ä–µ–Ω—å üë®‚Äçüéì" or message.text.lower() == "boy" or message.text == "üë®‚Äçüéì":
        if await insert_sex(message.from_user.id, Constants.guy, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–ö–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?", reply_markup=find_sex_keyboard)
            await state.set_state(User.find_sex)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –º–Ω–µ '–ø–∞—Ä–µ–Ω—å' –∏–ª–∏ '–¥–µ–≤—É—à–∫–∞' –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")


@dp.message(User.find_sex, F.text)
async def get_find_sex(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–µ–≤—É—à–µ–∫" or message.text == "–î–µ–≤—É—à–µ–∫ üë©‚Äçüéì" or message.text.lower() == "girls" or message.text == "üë©‚Äçüéì":
        if await insert_sex_find(message.from_user.id, Constants.girl, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=del_keyboard)
            await state.set_state(User.age)
    elif message.text.lower() == "–ø–∞—Ä–Ω–µ–π" or message.text == "–ü–∞—Ä–Ω–µ–π üë®‚Äçüéì" or message.text.lower() == "boys" or message.text == "üë®‚Äçüéì":
        if await insert_sex_find(message.from_user.id, Constants.guy, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=del_keyboard)
            await state.set_state(User.age)
    elif message.text == "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã ü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÄÔ∏è" or message.text.lower() == "–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã" or message.text == "ü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÄÔ∏è":
        if await insert_sex_find(message.from_user.id, Constants.someone, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=del_keyboard)
            await state.set_state(User.age)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –º–Ω–µ '–ø–∞—Ä–Ω–µ–π', '–¥–µ–≤—É—à–µ–∫' –∏–ª–∏ '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã' –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")


@dp.message(User.age, F.text)
async def get_age(message: types.Message, state: FSMContext):
    try:
        if int(message.text) < 14:
            await message.answer("–°–æ–∂–∞–ª–µ—é, –Ω–æ —Ç–µ–±–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 14")
        elif int(message.text) > 255:
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
        elif await insert_age(message.from_user.id, int(message.text), connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ù–∞–ø–∏—à–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ YY-YY")
            await state.set_state(User.age_find)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º")


@dp.message(User.age_find, F.text)
async def get_age_find(message: types.Message, state: FSMContext):
    try:
        if int(message.text.split("-")[0]) > int(message.text.split("-")[1]):
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ")
        elif int(message.text.split("-")[1]) > 255:
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
        elif await insert_age_find(message.from_user.id, int(message.text.split("-")[0]),
                                   int(message.text.split("-")[1]), connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ. –ú–∞–∫—Å–∏–º—É–º 4")
            await state.set_state(User.image)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º")
    except IndexError:
        await message.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YY-YY")


@dp.message(User.image, F.content_type.in_([F.PHOTO, F.VIDEO]))
async def get_image(message: types.Message, album: list[types.Message] = None, state: FSMContext = 0):
    if not album:
        return
    counter = 1
    for msg in album:
        if msg.photo:
            file_id = msg.photo[-1].file_id
            if await insert_media(message.from_user.id, file_id, counter, connection_pool):
                await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
            if await insert_type(message.from_user.id, Constants.photo, counter, connection_pool):
                await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        elif msg.video:
            file_id = msg.video.file_id
            if await insert_media(message.from_user.id, file_id, counter, connection_pool):
                await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
            if await insert_type(message.from_user.id, Constants.video, counter, connection_pool):
                await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        counter += 1
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ. –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å '-'")
    await state.set_state(User.description)


@dp.message(User.image)
async def get_any(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")


@dp.message(User.description, F.text)
async def get_desc(message: types.Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤")
    elif message.text == "-":
        if await insert_description(message.from_user.id, "", connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await print_profile(message.from_user.id, connection_pool, bot)
            await state.set_state(User.wait)
    else:
        if await insert_description(message.from_user.id, message.text, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await print_profile(message.from_user.id, connection_pool, bot)
            await state.set_state(User.wait)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    dbconfig = {
        "user": "root",
        "password": "12345678",
        "host": "localhost",
    }
    connection_pool = mysql.connector.pooling.MySQLConnectionPool(pool_name="my_pool", pool_size=32, **dbconfig)
    asyncio.run(main())

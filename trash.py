@user_reg.message(User.registration, F.text)
async def continue_registration_mes(message: types.Message, state: FSMContext):
    if message.text == "–î–∞ ‚úÖ" or message.text.lower() == "–¥–∞" or message.text == "‚úÖ" or message.text.lower() == "yes":
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?")
        await state.set_state(User.name)
    elif message.text == "–ù–µ—Ç ‚ùå" or message.text.lower() == "–Ω–µ—Ç" or message.text == "‚ùå" or message.text.lower() == "no":
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–æ–≥–¥–∞, –∫–∞–∫ –∑–∞—Ö–æ—á–µ—à—å)")
        await state.clear()
    else:
        await message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç' –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")




@user_reg.message(User.sex, F.text)
async def get_sex_mes(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–µ–≤—É—à–∫–∞" or message.text == "–î–µ–≤—É—à–∫–∞ üë©‚Äçüéì" or message.text.lower() == "girl" or message.text == "üë©‚Äçüéì":
        if await insert_sex(message.from_user.id, Constants.girl, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?", reply_markup=find_sex_keyboard)
            await state.set_state(User.find_sex)
    elif message.text.lower() == "–ø–∞—Ä–µ–Ω—å" or message.text == "–ü–∞—Ä–µ–Ω—å üë®‚Äçüéì" or message.text.lower() == "boy" or message.text == "üë®‚Äçüéì":
        if await insert_sex(message.from_user.id, Constants.guy, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?", reply_markup=find_sex_keyboard)
            await state.set_state(User.find_sex)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –º–Ω–µ '–ø–∞—Ä–µ–Ω—å' –∏–ª–∏ '–¥–µ–≤—É—à–∫–∞' –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")

@user_reg.message(User.find_sex, F.text)
async def get_find_sex_mes(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–µ–≤—É—à–µ–∫" or message.text == "–î–µ–≤—É—à–µ–∫ üë©‚Äçüéì" or message.text.lower() == "girls" or message.text == "üë©‚Äçüéì":
        if await insert_sex_find(message.from_user.id, Constants.girl, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞?", reply_markup=uni_keyboard)
            await state.set_state(User.university)
    elif message.text.lower() == "–ø–∞—Ä–Ω–µ–π" or message.text == "–ü–∞—Ä–Ω–µ–π üë®‚Äçüéì" or message.text.lower() == "boys" or message.text == "üë®‚Äçüéì":
        if await insert_sex_find(message.from_user.id, Constants.guy, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞?", reply_markup=uni_keyboard)
            await state.set_state(User.university)
    elif message.text == "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã ü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÄÔ∏è" or message.text.lower() == "–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã" or message.text == "ü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÄÔ∏è":
        if await insert_sex_find(message.from_user.id, Constants.someone, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞?", reply_markup=uni_keyboard)
            await state.set_state(User.university)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –º–Ω–µ '–ø–∞—Ä–Ω–µ–π', '–¥–µ–≤—É—à–µ–∫' –∏–ª–∏ '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã' –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")

@user_reg.message(User.university, F.text)
async def get_uni(message: types.Message, state: FSMContext):
    if message.text == "–ú–ì–£":
        if await insert_uni(message.from_user.id, Constants.MSU, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=await create_inline_keyboard(button_texts))
            await state.set_state(User.find_university)
    elif message.text == "–í–®–≠":
        if await insert_uni(message.from_user.id, Constants.HSE, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=await create_inline_keyboard(button_texts))
            await state.set_state(User.find_university)
    elif message.text == "–†–ê–ù–•–ò–ì–°":
        if await insert_uni(message.from_user.id, Constants.RANEPA, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=await create_inline_keyboard(button_texts))
            await state.set_state(User.find_university)
    elif message.text == "–ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞":
        if await insert_uni(message.from_user.id, Constants.BMSTU, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=await create_inline_keyboard(button_texts))
            await state.set_state(User.find_university)
    elif message.text == "–ú–ò–†–ï–ê":
        if await insert_uni(message.from_user.id, Constants.MIREA, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=await create_inline_keyboard(button_texts))
            await state.set_state(User.find_university)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")

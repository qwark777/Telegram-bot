from collections import defaultdict
from copy import deepcopy

from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from pyexpat.errors import messages

from bot_functions import get_connection_pool, bot, create_inline_keyboard
from clases import User, Constants
from databases_functions import insert_sex_find, insert_age_find, insert_media, insert_type, print_registration_profile, \
    insert_description, not_in_database, select_name, insert_full_name, insert_sex, insert_age, insert_uni
from reply import del_keyboard, start_keyboard, find_sex_keyboard, sex_keyboard, uni_keyboard, button_texts, back_keyboard


user_reg = Router()
find_uni = defaultdict(lambda: deepcopy(button_texts))


@user_reg.callback_query(User.find_university, lambda c: c.data and c.data.startswith('btn'))
async def keyboard_handler(callback_query: types.CallbackQuery, state: FSMContext):
    index = int(callback_query.data.split("_")[-1])
    if index  == 100:
        await callback_query.message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        await state.set_state(User.age)
    elif index  == 99:
        pass
    else:
        if find_uni[callback_query.from_user.id][index-1][-1] == '‚ùå':
            char = '‚úÖ'
        else:
            char = '‚ùå'
        find_uni[callback_query.from_user.id][index-1] = f"{find_uni[callback_query.from_user.id][index-1][:-1]}{char}"
        try:
            await callback_query.message.edit_text(text=callback_query.message.text, reply_markup=await create_inline_keyboard(find_uni[callback_query.from_user.id]))
        except Exception as e:
            print(e)

    await bot.answer_callback_query(callback_query.id)


@user_reg.callback_query(lambda c: c.data and c.data == 'btn_99')
async def back(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == User.age:
        await callback_query.message.answer("–ö–∞–∫ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?", reply_markup=back_keyboard)
        await state.set_state(User.name)
    elif current_state == User.name:
        await callback_query.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.")
    else:
        await callback_query.message.reply("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç.")

    await bot.answer_callback_query(callback_query.id)


@user_reg.callback_query(lambda c: c.data and c.data.startswith('btn'))
async def passsss(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)


@user_reg.message(Command("profile"), F.text)
async def print_profile(message: types.Message, state: FSMContext):
    connection_pool = await get_connection_pool()
    await print_registration_profile(message.from_user.id, connection_pool, bot)


@user_reg.message(StateFilter(None), F.text)
async def start(message: types.Message, state: FSMContext):
    connection_pool = await get_connection_pool()
    if await not_in_database(message.from_user.id, connection_pool):
        await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –≤–∏–∂—É, —á—Ç–æ –º—ã –Ω–µ –∑–Ω–∞–∫–æ–º—ã. –•–æ—á–µ—à—å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
                             reply_markup=start_keyboard)
    else:
        string = await select_name(message.from_user.id, connection_pool)
        await message.answer("–ü—Ä–∏–≤–µ—Ç, {}! –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ?".format(string))
    await state.set_state(User.registration)


@user_reg.message(User.registration, F.text)
async def continue_registration(message: types.Message, state: FSMContext):

    if message.text == "–î–∞ ‚úÖ" or message.text.lower() == "–¥–∞" or message.text == "‚úÖ" or message.text.lower() == "yes":
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?", reply_markup=del_keyboard)
        await message.answer(" ", reply_markup=back_keyboard)
        await state.set_state(User.name)
    elif message.text == "–ù–µ—Ç ‚ùå" or message.text.lower() == "–Ω–µ—Ç" or message.text == "‚ùå" or message.text.lower() == "no":
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–æ–≥–¥–∞, –∫–∞–∫ –∑–∞—Ö–æ—á–µ—à—å)", reply_markup=del_keyboard)
        await state.clear()
    else:
        await message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç' –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
                             reply_markup=del_keyboard)


@user_reg.message(User.name, F.text)
async def get_name(message: types.Message, state: FSMContext):
    connection_pool = await get_connection_pool()
    if len(message.text) > 50:
        await message.answer("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        if await insert_full_name(message.from_user.id, message.text, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
            await state.clear()
        else:
            await message.answer("–¢—ã –ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞?", reply_markup=sex_keyboard)
            await state.set_state(User.sex)


@user_reg.message(User.sex, F.text)
async def get_sex(message: types.Message, state: FSMContext):
    connection_pool = await get_connection_pool()
    if message.text.lower() == "–¥–µ–≤—É—à–∫–∞" or message.text == "–î–µ–≤—É—à–∫–∞ üë©‚Äçüéì" or message.text.lower() == "girl" or message.text == "üë©‚Äçüéì":
        if await insert_sex(message.from_user.id, Constants.girl, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–ö–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?", reply_markup=find_sex_keyboard)
            await state.set_state(User.find_sex)
    elif message.text.lower() == "–ø–∞—Ä–µ–Ω—å" or message.text == "–ü–∞—Ä–µ–Ω—å üë®‚Äçüéì" or message.text.lower() == "boy" or message.text == "üë®‚Äçüéì":
        if await insert_sex(message.from_user.id, Constants.guy, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–ö–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?", reply_markup=find_sex_keyboard)
            await state.set_state(User.find_sex)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –º–Ω–µ '–ø–∞—Ä–µ–Ω—å' –∏–ª–∏ '–¥–µ–≤—É—à–∫–∞' –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")


@user_reg.message(User.find_sex, F.text)
async def get_find_sex(message: types.Message, state: FSMContext):
    connection_pool = await get_connection_pool()
    if message.text.lower() == "–¥–µ–≤—É—à–µ–∫" or message.text == "–î–µ–≤—É—à–µ–∫ üë©‚Äçüéì" or message.text.lower() == "girls" or message.text == "üë©‚Äçüéì":
        if await insert_sex_find(message.from_user.id, Constants.girl, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞?", reply_markup=uni_keyboard)
            await state.set_state(User.university)
    elif message.text.lower() == "–ø–∞—Ä–Ω–µ–π" or message.text == "–ü–∞—Ä–Ω–µ–π üë®‚Äçüéì" or message.text.lower() == "boys" or message.text == "üë®‚Äçüéì":
        if await insert_sex_find(message.from_user.id, Constants.guy, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞?", reply_markup=uni_keyboard)
            await state.set_state(User.university)
    elif message.text == "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã ü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÄÔ∏è" or message.text.lower() == "–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã" or message.text == "ü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÄÔ∏è":
        if await insert_sex_find(message.from_user.id, Constants.someone, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ", reply_markup=del_keyboard)
        else:
            await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞?", reply_markup=uni_keyboard)
            await state.set_state(User.university)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –º–Ω–µ '–ø–∞—Ä–Ω–µ–π', '–¥–µ–≤—É—à–µ–∫' –∏–ª–∏ '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã' –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")


@user_reg.message(User.university, F.text)
async def get_uni(message: types.Message, state: FSMContext):
    connection_pool = await get_connection_pool()

    if message.text == "–ú–ì–£":
        if await insert_uni(message.from_user.id, Constants.MSU, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=await create_inline_keyboard(button_texts))
            await state.set_state(User.find_university)
    elif message.text == "–í–®–≠":
        if await insert_uni(message.from_user.id, Constants.HSE, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=await create_inline_keyboard(button_texts))
            await state.set_state(User.find_university)
    elif message.text == "–†–ê–ù–•–ò–ì–°":
        if await insert_uni(message.from_user.id, Constants.RANEPA, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=await create_inline_keyboard(button_texts))
            await state.set_state(User.find_university)
    elif message.text == "–ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞":
        if await insert_uni(message.from_user.id, Constants.BMSTU, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=await create_inline_keyboard(button_texts))
            await state.set_state(User.find_university)
    elif message.text == "–ú–ò–†–ï–ê":
        if await insert_uni(message.from_user.id, Constants.MIREA, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=await create_inline_keyboard(button_texts))
            await state.set_state(User.find_university)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")


@user_reg.message(User.age, F.text)
async def get_age(message: types.Message, state: FSMContext):
    connection_pool = await get_connection_pool()
    try:
        if int(message.text) < 14:
            await message.answer("–°–æ–∂–∞–ª–µ—é, –Ω–æ —Ç–µ–±–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 14")
        elif int(message.text) > 255:
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
        elif await insert_age(message.from_user.id, int(message.text), connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ù–∞–ø–∏—à–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ YY-YY")
            await state.set_state(User.age_find)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º")


@user_reg.message(User.age_find, F.text)
async def get_age_find(message: types.Message, state: FSMContext):
    connection_pool = await get_connection_pool()
    try:
        if int(message.text.split("-")[0]) > int(message.text.split("-")[1]):
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ")
        elif int(message.text.split("-")[1]) > 255:
            await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
        elif await insert_age_find(message.from_user.id, int(message.text.split("-")[0]),
                                   int(message.text.split("-")[1]), connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ. –ú–∞–∫—Å–∏–º—É–º 4")
            await state.set_state(User.image)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º")
    except IndexError:
        await message.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YY-YY")


@user_reg.message(User.image, F.content_type.in_([F.PHOTO, F.VIDEO]))
async def get_album(message: types.Message, album: list[types.Message] = None, state: FSMContext = 0):
    connection_pool = await get_connection_pool()
    if not album:
        return
    counter = 1
    for msg in album:
        if msg.photo:
            file_id = msg.photo[-1].file_id
            if await insert_media(message.from_user.id, file_id, counter, connection_pool):
                await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
            if await insert_type(message.from_user.id, Constants.photo, counter, connection_pool):
                await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        elif msg.video:
            file_id = msg.video.file_id
            if await insert_media(message.from_user.id, file_id, counter, connection_pool):
                await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
            if await insert_type(message.from_user.id, Constants.video, counter, connection_pool):
                await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        counter += 1
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ. –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å '-'")
    await state.set_state(User.description)


@user_reg.message(User.image)
async def get_any(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")


@user_reg.message(User.description, F.text)
async def get_desc(message: types.Message, state: FSMContext):
    connection_pool = await get_connection_pool()
    if len(message.text) > 200:
        await message.answer("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤")
    elif message.text == "-":
        if await insert_description(message.from_user.id, "", connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await print_registration_profile(message.from_user.id, connection_pool, bot)
            await state.set_state(User.wait)
    else:
        if await insert_description(message.from_user.id, message.text, connection_pool):
            await message.answer("–í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ")
        else:
            await print_registration_profile(message.from_user.id, connection_pool, bot)
            await state.set_state(User.wait)


@user_reg.message(User.wait, F.text)
async def get_answer(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")


